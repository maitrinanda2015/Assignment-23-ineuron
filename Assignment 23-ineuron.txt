1.Given preorder of a binary tree, calculate its **[depth(or height)](https://www.geeksforgeeks.org/write-a-c-program-to-find-the-maximum-depth-or-height-of-a-tree/)** [starting from depth 0]. The preorder is given as a string with two possible characters.

1. ‘l’ denotes the leaf
2. ‘n’ denotes internal node

The given tree can be seen as a full binary tree where every node has 0 or two children. The two children of a node can ‘n’ or ‘l’ or mix of both.

**Examples :**

Input  : nlnll
Output : 2

Input  : nlnnlll
Output : 3

ans-:
class BinaryTreeDepth {
    public static int calculateDepth(String preorder) {
        int depth = 0;
        int n = preorder.length();
        int i = 0;

        while (i < n) {
            if (preorder.charAt(i) == 'n') {
                depth++;
                i++;
            } else if (preorder.charAt(i) == 'l') {
                i++;
            }
        }

        return depth;
    }

    public static void main(String[] args) {
        String preorder1 = "nlnll";
        int depth1 = calculateDepth(preorder1);
        System.out.println("Depth: " + depth1);

        String preorder2 = "nlnnlll";
        int depth2 = calculateDepth(preorder2);
        System.out.println("Depth: " + depth2);
    }
}
2.Given a Binary tree, the task is to print the **left view** of the Binary Tree. The left view of a Binary Tree is a set of leftmost nodes for every level.

**Examples:**

***Input:***

            4

          /   \

        5     2

             /   \

            3     1

           /  \

          6    7

***Output:** 4 5 3 6*

***Input:***

                    1

                  /   \

                2       3

                 \

                   4

                     \

                        5

                           \

                             6

**Output:** 1 2 4 5 6

ans-:
import java.util.*;

class Node {
    int data;
    Node left, right;

    public Node(int data) {
        this.data = data;
        left = right = null;
    }
}

class BinaryTreeLeftView {
    Node root;

    public void printLeftView() {
        if (root == null)
            return;

        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            boolean isFirstNode = true;

            for (int i = 0; i < levelSize; i++) {
                Node node = queue.poll();

                if (isFirstNode) {
                    System.out.print(node.data + " ");
                    isFirstNode = false;
                }

                if (node.left != null)
                    queue.add(node.left);
                if (node.right != null)
                    queue.add(node.right);
            }
        }
    }

    public static void main(String[] args) {
        BinaryTreeLeftView tree = new BinaryTreeLeftView();
        tree.root = new Node(4);
        tree.root.left = new Node(5);
        tree.root.right = new Node(2);
        tree.root.right.left = new Node(3);
        tree.root.right.right = new Node(1);
        tree.root.right.left.left = new Node(6);
        tree.root.right.left.right = new Node(7);

        System.out.println("Left View:");
        tree.printLeftView();
    }
}
3.Given a Binary Tree, print the Right view of it.

The right view of a Binary Tree is a set of nodes visible when the tree is visited from the Right side.

**Examples:**

**Input:**

         1

      /     \

   2         3

/   \       /  \

4     5   6    7

             \

               8

**Output**: 

Right view of the tree is 1 3 7 8

**Input:**

         1

       /

    8

  /

7

**Output**: 

Right view of the tree is 1 8 7

ans-:
import java.util.*;

class Node {
    int data;
    Node left, right;

    public Node(int data) {
        this.data = data;
        left = right = null;
    }
}

class BinaryTreeRightView {
    Node root;

    public void printRightView() {
        if (root == null)
            return;

        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            int levelSize = queue.size();

            for (int i = 0; i < levelSize; i++) {
                Node node = queue.poll();

                if (i == levelSize - 1) {
                    System.out.print(node.data + " ");
                }

                if (node.left != null)
                    queue.add(node.left);
                if (node.right != null)
                    queue.add(node.right);
            }
        }
    }

    public static void main(String[] args) {
        BinaryTreeRightView tree = new BinaryTreeRightView();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.root.right.left = new Node(6);
        tree.root.right.right = new Node(7);
        tree.root.right.left.right = new Node(8);

        System.out.println("Right View:");
        tree.printRightView();
    }
}
4.Given a Binary Tree, The task is to print the **bottom view** from left to right. A node **x** is there in output if x is the bottommost node at its horizontal distance. The horizontal distance of the left child of a node x is equal to a horizontal distance of x minus 1, and that of a right child is the horizontal distance of x plus 1.

**Examples:**

**Input:**

             20

           /     \

        8         22

    /      \         \

5         3        25

        /    \

   10       14

**Output:** 5, 10, 3, 14, 25.

**Input:**

             20

           /     \

        8         22

    /      \      /   \

 5         3    4     25

         /    \

     10       14

**Output:**

5 10 4 14 25.

**Explanation:**

If there are multiple bottom-most nodes for a horizontal distance from the root, then print the later one in the level traversal.

**3 and 4** are both the bottom-most nodes at a horizontal distance of 0, we need to print 4.

ans-:
import java.util.*;

class Node {
    int data;
    int hd; // horizontal distance
    Node left, right;

    public Node(int data) {
        this.data = data;
        hd = Integer.MAX_VALUE;
        left = right = null;
    }
}

class BinaryTreeBottomView {
    Node root;

    public void printBottomView() {
        if (root == null)
            return;

        Queue<Node> queue = new LinkedList<>();
        Map<Integer, Node> map = new TreeMap<>();

        root.hd = 0;
        queue.add(root);

        while (!queue.isEmpty()) {
            Node node = queue.poll();
            int hd = node.hd;

            map.put(hd, node);

            if (node.left != null) {
                node.left.hd = hd - 1;
                queue.add(node.left);
            }

            if (node.right != null) {
                node.right.hd = hd + 1;
                queue.add(node.right);
            }
        }

        for (Map.Entry<Integer, Node> entry : map.entrySet()) {
            System.out.print(entry.getValue().data + " ");
        }
    }

    public static void main(String[] args) {
        BinaryTreeBottomView tree = new BinaryTreeBottomView();
        tree.root = new Node(20);
        tree.root.left = new Node(8);
        tree.root.right = new Node(22);
        tree.root.left.left = new Node(5);
        tree.root.left.right = new Node(3);
        tree.root.right.right = new Node(25);
        tree.root.left.right.left = new Node(10);
        tree.root.left.right.right = new Node(14);

        System.out.println("Bottom View:");
        tree.printBottomView();
    }
}









